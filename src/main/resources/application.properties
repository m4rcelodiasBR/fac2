spring.application.name=facdigital

# ===============================
# CONFIGURAÇÃO DO BANCO DE DADOS (DataSource)
# ===============================
# URL de conexão para o PostgreSQL.
spring.datasource.url=jdbc:postgresql://localhost:5432/fac2
# Usuário do banco de dados.
spring.datasource.username=postgres
# ATENÇÃO: Substitua 'sua_senha_aqui' pela senha que você definiu para o usuário postgres.
spring.datasource.password=postgres

# ===============================
# CONFIGURAÇÃO DO JPA/HIBERNATE
# ===============================
# Dialeto específico para o PostgreSQL.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Ação a ser tomada no schema do banco ao iniciar a aplicação.
# 'update': O Hibernate tentará atualizar o schema se houver mudanças nas entidades.
# Ótimo para desenvolvimento. Em produção, usaremos 'validate' ou 'none'.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console o SQL gerado pelo Hibernate. Útil para depuração.
spring.jpa.show-sql=true

# ===============================
# CONFIGURAÇÕES JWT
# ===============================
# ATENÇÃO: Este segredo deve ser longo, complexo e armazenado de forma segura (ex: variáveis de ambiente).
# Para desenvolvimento, podemos usar um valor qualquer.
app.jwt.secret=SegredoMuitoLongoEComplexoParaAssinaturaDeTokensDoFacDigital

# Tempo de expiração do token em milissegundos (ex: 24 horas)
app.jwt.expiration-ms=86400000

# ===============================
# CONFIGURAÇÕES DE CRIPTOGRAFIA
# ===============================
# Chave para criptografia AES dos graus. Deve ter 16, 24 ou 32 bytes.
# ATENÇÃO: Em produção, esta chave deve ser gerenciada de forma segura.
app.encryption.secret=ChaveSecreta123!
